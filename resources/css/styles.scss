// 1. Include functions first (so you can manipulate colors, SVGs, calc, etc)
@import "../../node_modules/bootstrap/scss/_functions";

// Default variable overrides.  standalone variables
// $body-bg: #000;$body-color: #111;

// 3. Include remainder of required Bootstrap stylesheets (including any separate color mode stylesheets)
@import "../../node_modules/bootstrap/scss/_variables";
@import "../../node_modules/bootstrap/scss/_variables-dark";
// 4. Include any default map overrides here

// Create your own map
$custom-colors: (
  "custom-color": #900
);
// Merge the maps
$theme-colors: map-merge($theme-colors, $custom-colors);
// !! After its definition in variables and before its usage in maps 

// 5. Include remainder of required parts
@import "../../node_modules/bootstrap/scss/_maps";
@import "../../node_modules/bootstrap/scss/_mixins";
@import "../../node_modules/bootstrap/scss/_root";

// 6. Include any other optional stylesheet partials as desired; list below is not inclusive of all available stylesheets
@import "../../node_modules/bootstrap/scss/_utilities";
@import "../../node_modules/bootstrap/scss/_reboot";
@import "../../node_modules/bootstrap/scss/_type";
@import "../../node_modules/bootstrap/scss/_images";
@import "../../node_modules/bootstrap/scss/_containers";
@import "../../node_modules/bootstrap/scss/_grid";
@import "../../node_modules/bootstrap/scss/_helpers";
// 7. Optionally include utilities API last to generate classes based on the Sass map in `_utilities.scss`
@import "../../node_modules/bootstrap/scss/utilities/_api";

// 8. Add additional custom code here
// full import stack found in bootstrap.scss
// @import "../../node_modules/bootstrap/scss/bootstrap";

// Bootstrap includes !default flag to override variable’s default value in your own Sass without modifying Bootstrap’s source code
// scss/_variables.scss
// Copy and paste variables, modify their values, remove the !default (then it won’t be re-assigned by the default values)

// Sass maps, key value pairs Also have !default. generate families of related CSS.    colors, grid breakpoints.  
// standalone variables vs  map, by creating a new Sass map merging it with the original map

 
// Watch your custom Sass for changes and compile it to CSS
// sass --watch ./scss/custom.scss ./css/custom.css

:root {
            --primary-color: #3b82f6;
            --secondary-color: #1e40af;
            --accent-color: #f59e0b;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-color);
            color: var(--dark-color);
            line-height: 1.6;
        }

        .navbar {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            box-shadow: 0 2px 10px rgba(59, 130, 246, 0.15);
        }

        .navbar-brand {
            font-weight: 700;
            font-size: 1.5rem;
        }

        .card {
            border: none;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            transition: all 0.3s ease;
            border-radius: 12px;
        }

        .card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
            transform: translateY(-1px);
        }

        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
        }

        .btn-danger {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
        }

        .hero-section {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 4rem 0;
            margin-bottom: 2rem;
        }

        .hero-section h1 {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .hero-section p {
            font-size: 1.25rem;
            opacity: 0.9;
        }

        .article-card {
            height: 100%;
            overflow: hidden;
        }

        .article-image {
            height: 200px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .article-card:hover .article-image {
            transform: scale(1.05);
        }

        .article-meta {
            color: #6b7280;
            font-size: 0.875rem;
        }

        .search-box {
            border-radius: 25px;
            border: 2px solid #e5e7eb;
            padding: 0.75rem 1.5rem;
            transition: all 0.3s ease;
        }

        .search-box:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
        }

        .content-area {
            min-height: 70vh;
        }

        .footer {
            background-color: var(--dark-color);
            color: white;
            padding: 2rem 0;
            margin-top: 4rem;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
        }

        .badge-published {
            background-color: var(--success-color);
        }

        .badge-draft {
            background-color: #6b7280;
        }

        .image-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .gallery-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .gallery-image:hover {
            transform: scale(1.05);
        }